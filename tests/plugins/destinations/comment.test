<?php
// $Id$

/**
 * Test comment migration.
 */
class MigrateCommentUnitTest extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Comment migration',
      'description' => 'Test migration of comment data',
      'group' => 'Migrate',
    );
  }

  function setUp() {
    parent::setUp('taxonomy', 'image', 'comment', 'migrate', 'migrate_example');
  }

  function testCommentImport() {
    $migration = Migration::getInstance('WineVarietyMigration');
    $result = $migration->processImport();
    $this->assertEqual($result, Migration::RESULT_COMPLETED,
      t('Variety term import returned RESULT_COMPLETED'));
    $migration = Migration::getInstance('WineRegionMigration');
    $result = $migration->processImport();
    $this->assertEqual($result, Migration::RESULT_COMPLETED,
      t('Region term import returned RESULT_COMPLETED'));
    $migration = Migration::getInstance('WineBestWithMigration');
    $result = $migration->processImport();
    $this->assertEqual($result, Migration::RESULT_COMPLETED,
      t('"Best With" term import returned RESULT_COMPLETED'));
    $migration = Migration::getInstance('WineUserMigration');
    $result = $migration->processImport();
    $this->assertEqual($result, Migration::RESULT_COMPLETED,
      t('User import returned RESULT_COMPLETED'));
    $migration = Migration::getInstance('WineProducerMigration');
    $result = $migration->processImport();
    $this->assertEqual($result, Migration::RESULT_COMPLETED,
      t('Producer node import returned RESULT_COMPLETED'));
    $migration = Migration::getInstance('WineWineMigration');
    $result = $migration->processImport();
    $this->assertEqual($result, Migration::RESULT_COMPLETED,
      t('Wine node import returned RESULT_COMPLETED'));
    $migration = Migration::getInstance('WineCommentMigration');
    $result = $migration->processImport();
    $this->assertEqual($result, Migration::RESULT_COMPLETED,
      t('Comment import returned RESULT_COMPLETED'));

    $result = db_select('migrate_example_wine_comment', 'wc')
              ->fields('wc', array('commentid', 'comment_parent', 'name', 'mail', 'accountid', 'body', 'wineid', 'subject'))
              ->orderBy('comment_parent')
              ->execute();

    $rawcomments = comment_load_multiple(FALSE);
    // Index by subject
    $comments = array();
    foreach ($rawcomments as $comment) {
      $comments[$comment->subject] = $comment;
    }
    $count = 0;
    foreach ($result as $row) {
      $count++;
      $comment = $comments[$row->subject];
      $this->assertNotNull($comment, t('!subject imported', array('!subject' => $row->subject)));
      $this->assertEqual($comment->mail, $row->mail,
        t('Mail matches'));
      $this->assertEqual($comment->status, COMMENT_PUBLISHED,
        t('Status matches'));
      $this->assertEqual($comment->nid, $row->wineid,
        t('Nid matches'));
      $this->assertEqual($comment->comment_body[LANGUAGE_NONE][0]['value'], $row->body,
        t('Body matches'));
      // TODO: uid
      // TODO: parent
    }
    $this->assertEqual(count($comments), $count,
      t('Counts of comments and input rows match'));

    // Test rollback
    $result = $migration->processRollback();
    $this->assertEqual($result, Migration::RESULT_COMPLETED,
      t('Comment rollback returned RESULT_COMPLETED'));
    $rawcomments = comment_load_multiple(FALSE);
    $this->assertEqual(count($rawcomments), 0, t('All comments deleted'));
    $count = db_select('migrate_map_winecomment', 'map')
              ->fields('map', array('sourceid1'))
              ->countQuery()
              ->execute()
              ->fetchField();
    $this->assertEqual($count, 0, t('Map cleared'));
    $count = db_select('migrate_message_winecomment', 'msg')
              ->fields('msg', array('sourceid1'))
              ->countQuery()
              ->execute()
              ->fetchField();
    $this->assertEqual($count, 0, t('Messages cleared'));
  }
}
