<?php
// $Id$

/**
 * Test taxonomy migration.
 */
class MigrateTaxonomyUnitTest extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Taxonomy migration',
      'description' => 'Test migration of taxonomy data',
      'group' => 'Migrate',
    );
  }

  function setUp() {
    parent::setUp('migrate_example');
  }

  function testTermImport() {
    $migration = Migration::getInstance('BeerTermMigration');
    $migration->outputFunction = 'drupal_set_message';
    $result = $migration->import();
    $this->assertEqual($result, Migration::RESULT_COMPLETED,
      t('Term import returned RESULT_COMPLETED'));
    $vocab = taxonomy_vocabulary_machine_name_load('migrate_example_beer_styles');
    $rawterms = taxonomy_term_load_multiple(array(), array('vid' => $vocab->vid));
    $terms = array();
    foreach ($rawterms as $term) {
      $terms[$term->name] = $term;
    }
    $result = db_select('migrate_example_beer_topic', 'met')
             ->fields('met', array('style', 'details', 'style_parent'))
             ->execute();
    $count = 0;
    foreach ($result as $row) {
      $count++;
      $term = $terms[$row->style];
      $this->assertNotNull($term, t('!name imported', array('!name' => $row->style)));
      $this->assertEqual($term->description, $row->details,
        t('Descriptions match'));
      $parents = taxonomy_get_parents($term->tid);
      if ($row->style_parent) {
        $this->assertEqual(count($parents), 1, t('Single parent'));
        $parent = array_pop($parents);
        $this->assertEqual($row->style_parent, $parent->name,
          t('Parent matches'));
      }
      else {
        $this->assertFalse($parents, t('No parent'));
      }
    }
    $this->assertEqual(count($terms), $count,
      t('Counts of terms and input rows match'));
  }
}
