<?php
// $Id$

/**
 * Test user migration.
 */
class MigrateUserUnitTest extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'User migration',
      'description' => 'Test migration of user data',
      'group' => 'Migrate',
    );
  }

  function setUp() {
    parent::setUp('migrate', 'migrate_example');

    // To test timestamps
    date_default_timezone_set('US/Mountain');
  }

  function testUserImport() {
    $migration = Migration::getInstance('WineUserMigration');
    $result = $migration->processImport();
    $this->assertEqual($result, Migration::RESULT_COMPLETED,
      t('User import returned RESULT_COMPLETED'));
    $result = db_select('migrate_example_wine_account', 'mea')
             ->fields('mea', array('accountid', 'status', 'posted', 'name', 'nickname', 'password', 'mail'))
             ->execute();
    $rawusers = user_load_multiple(FALSE, array(), TRUE);
    // Index by name
    $users = array();
    foreach ($rawusers as $uid => $account) {
      // Skip anon/admin users
      if ($uid > 1) {
        $users[$account->name] = $account;
      }
    }
    $count = 0;
    foreach ($result as $row) {
      $count++;
      $account = $users[$row->name];
      $this->assertNotNull($account, t('!name imported', array('!name' => $row->name)));
      $this->assertEqual($account->status, $row->status,
        t('Status matches'));
      $this->assertEqual($account->mail, $row->mail,
        t('Mail matches'));
      $this->assertNotNull($account->roles[2], t('Authenticated role'));
      $created = strtotime($row->posted);
      $this->assertEqual($account->created, $created,
        t('Created time matches'));
      $this->assertTrue(user_check_password($row->password, $account),
        t('Password matches'));
    }
    $this->assertEqual(count($users), $count,
      t('Counts of users and input rows match'));

    // Test rollback
    $result = $migration->processRollback();
    $this->assertEqual($result, Migration::RESULT_COMPLETED,
      t('User rollback returned RESULT_COMPLETED'));
    $rawusers = user_load_multiple(FALSE, array(), TRUE);
    // 2 users left - anon and admin
    $this->assertEqual(count($rawusers), 2, t('All imported users deleted'));
    $count = db_select('migrate_map_wineuser', 'map')
              ->fields('map', array('sourceid1'))
              ->countQuery()
              ->execute()
              ->fetchField();
    $this->assertEqual($count, 0, t('Map cleared'));
    $count = db_select('migrate_message_wineuser', 'msg')
              ->fields('msg', array('sourceid1'))
              ->countQuery()
              ->execute()
              ->fetchField();
    $this->assertEqual($count, 0, t('Messages cleared'));
  }
}
