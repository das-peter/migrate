<?php
/* $Id$ */

/**
* Implementation of hook_schema().
*/
function migrate_schema() {
  $schema['migrate_content_sets'] = array(
    'description' => t('Sets of content mappings'),
    'fields' => array(
      'mcsid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'view_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'sourcekey' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'contenttype' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'node',
      ),
      'desttype' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'clearing' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => (int)FALSE,
      ),
      'importing' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => (int)FALSE,
      ),
      'scanning' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => (int)FALSE,
      ),
      'lastimported' => array(
        'type' => 'datetime',
        'not null' => FALSE,
      ),
      'weight' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'rowcount' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('mcsid'),
    'unique keys' => array(
      'view_name' => array('view_name'),
    ),
  );
  $schema['migrate_content_mappings'] = array(
    'description' => t('Content field mappings'),
    'fields' => array(
      'mcmid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mcsid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'srcfield' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'destfield' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'default_value' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('mcmid'),
    'unique keys' => array(
      'colkey' => array('mcsid', 'destfield'),
    ),
  );
    
  return $schema;
}

/**
* Implementation of hook_install().
*/
function migrate_install() {
  // Create tables
  drupal_install_schema('migrate');
}

/**
* Implementation of hook_uninstall().
*/
function migrate_uninstall() {
  // Remove dynamically-created mapping and message tables
  $tw_active = module_exists('tw');
  $sql = "SELECT view_name, contenttype FROM {migrate_content_sets}";
  $result = db_query($sql);
  while ($row = db_fetch_object($result)) {
    $maptablename = _migrate_map_table_name($row->view_name);
    if ($tw_active) {
      tw_remove_tables($maptablename);
    }
    if (db_table_exists($maptablename)) {
      $sql = "DROP TABLE $maptablename";
      db_query($sql);
    }
    $msgtablename = _migrate_message_table_name($row->view_name);
    if ($tw_active) {
      tw_remove_tables($msgtablename);
    }
    if (db_table_exists($msgtablename)) {
      $sql = "DROP TABLE $msgtablename";
      db_query($sql);
    }
  }
  drupal_uninstall_schema('migrate');
}

// Refactoring of map and message tables
function migrate_update_6000() {
  $ret = array();

  // Need to make sure schema inspect support is included
  schema_init();
  // Make view_name unique
  db_drop_index($ret, 'migrate_content_sets', 'view_name');
  db_add_unique_key($ret, 'migrate_content_sets', 'view_name', array('view_name'));

  $sql = "SELECT * FROM {migrate_content_sets}";
  $result = db_query($sql);
  while ($row = db_fetch_object($result)) {
    // Rename map and message tables
    $oldmaptable = $row->view_name . '_' . $row->contenttype . '_map';
    if (db_table_exists($oldmaptable)) {
      $newmaptable = _migrate_map_table_name($row->view_name);
      db_rename_table($ret, $oldmaptable, $newmaptable);
      $maptableexists = TRUE;
    }
    else {
      $maptableexists = FALSE;
    }
    $oldmsgtable = $row->view_name . '_' . $row->contenttype . '_msgs';
    if (db_table_exists($oldmsgtable)) {
      $newmsgtable = _migrate_message_table_name($row->view_name);
      db_rename_table($ret, $oldmsgtable, $newmsgtable);
      $msgtableexists = TRUE;
    }
    else {
      $msgtableexists = FALSE;
    }

    if ($maptableexists) {
      // Remove mcsid from map table
      db_drop_field($ret, $newmaptable, 'mcsid');
  
      // Rename remaining map table columns
      db_drop_primary_key($ret, $newmaptable);
      db_drop_unique_key($ret, $newmaptable, 'idkey');
      db_change_field($ret, $newmaptable, $row->sourcekey, 'sourceid', 
        array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE), 
        array('primary key' => array('sourceid')));
      db_change_field($ret, $newmaptable, $row->contenttype . 'id', 'destid', 
        array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE), 
        array('unique keys' => array('destid' => array('destid'))));
        
      // Update Table Wizard to reflect the changes
      tw_remove_tables($oldmaptable);
      tw_add_tables($newmaptable);
    }

    if ($msgtableexists) {
      tw_remove_tables($oldmsgtable);
      tw_add_tables($newmsgtable);
    }

    // Save the content set, to make sure the message table is created
    migrate_save_content_set($row);
  }
  return $ret;
}

/**
 * Refactoring of content/destination types
 *
 */
function migrate_update_6001() {
  // Clear desttype, except for nodes
  $sql = "UPDATE {migrate_content_sets} SET desttype='' WHERE contenttype <> 'node'";
  db_query($sql);
  return array();
}
